
1. 

val_test01.cpp

error 1: since n = 10, so only allocate 10 ints size to x, but in line 82, when i = 10, it will access to x[10], which is illgal.
error 2: delete [] x cannot successfully free x;

val_test02.cpp

error 1: Conditional jump or move depends on uninitialised value(s)

line 89 and line 90, since x[6] and x[7] are uninitialised.

solution: initialize x[6] and x[7] before accessing.



MMult1

origin 

void MMult1(long m, long n, long k, double *a, double *b, double *c) {
  // TODO: See instructions below
  for (long j = 0; j < n; j++) {
    for (long p = 0; p < k; p++) {
      #pragma omp parallel
      for (long i = 0; i < m; i++) {
        double A_ip = a[i+p*m];
        double B_pj = b[p+j*k];
        double C_ij = c[i+j*m];
        C_ij = C_ij + A_ip * B_pj;
        c[i+j*m] = C_ij;
      }
    }
  }
}

 Dimension       Time    Gflop/s       GB/s        Error
        16   4.918450   0.406633   6.506125 0.000000e+00
        64   4.813891   0.415497   6.647957 0.000000e+00
       112   4.861936   0.411486   6.583773 0.000000e+00
       160   4.855941   0.413316   6.613063 0.000000e+00
       208   4.884533   0.412682   6.602904 0.000000e+00
       256   4.892304   0.411517   6.584271 0.000000e+00
       304   4.897098   0.413061   6.608980 0.000000e+00
       352   4.860386   0.412777   6.604425 0.000000e+00
       400   4.943497   0.414282   6.628506 0.000000e+00
       448   5.481337   0.393694   6.299103 0.000000e+00
       496   5.324423   0.412520   6.600320 0.000000e+00
       544   5.557521   0.405549   6.488788 0.000000e+00
       592   5.048481   0.410965   6.575434 0.000000e+00
       640   5.177838   0.405025   6.480394 0.000000e+00
       688   6.341469   0.410833   6.573330 0.000000e+00
       736   5.869124   0.407579   6.521258 0.000000e+00
       784   7.070291   0.408942   6.543078 0.000000e+00
       832   5.749817   0.400660   6.410560 0.000000e+00
       880   6.658222   0.409402   6.550429 0.000000e+00
       928   8.190111   0.390314   6.245024 0.000000e+00
       976   9.214500   0.403587   6.457399 0.000000e+00
      1024   5.203775   0.412678   6.602849 0.000000e+00
      1072   6.071385   0.405814   6.493018 0.000000e+00
      1120   7.006866   0.401015   6.416234 0.000000e+00
      1168   7.807422   0.408179   6.530867 0.000000e+00
      1216   8.986089   0.400184   6.402948 0.000000e+00
      1264  10.127363   0.398818   6.381089 0.000000e+00
      1312  11.298483   0.399771   6.396337 0.000000e+00
      1360  13.063918   0.385100   6.161597 0.000000e+00
      1408  14.199712   0.393150   6.290402 0.000000e+00
      1456  15.704629   0.393085   6.289359 0.000000e+00
      1504  17.220584   0.395117   6.321871 0.000000e+00
      1552  19.128210   0.390869   6.253898 0.000000e+00
      1600  20.685542   0.396025   6.336406 0.000000e+00
      1648  22.733292   0.393767   6.300271 0.000000e+00
      1696  24.760671   0.394044   6.304710 0.000000e+00
      1744  26.734393   0.396825   6.349201 0.000000e+00
      1792  29.059685   0.396053   6.336845 0.000000e+00
      1840  31.522438   0.395243   6.323880 0.000000e+00
      1888  34.537315   0.389715   6.235444 0.000000e+00
      1936  38.400628   0.377927   6.046829 0.000000e+00
      1984  40.327975   0.387301   6.196816 0.000000e+00





