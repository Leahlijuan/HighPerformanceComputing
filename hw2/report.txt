
1. 

val_test01.cpp

error 1: since n = 10, so only allocate 10 ints size to x, but in line 82, when i = 10, it will access to x[10], which is illgal.
error 2: delete [] x cannot successfully free x, so changed line 86 to   free(x);

val_test02.cpp

error 1: Conditional jump or move depends on uninitialised value(s)
line 89 and line 90, since x[6] and x[7] are uninitialised.

solution: initialize x[6] and x[7] before accessing.


2.

2.1
I have tried to change to loop order and found that with the order j-p-i can get the best performance.
Since the matrix elements are stored column by column, with this order, can make full advantage of cache and reduce the access to main memory.


When I tried different block sizes, I found that when block size is 32, I got the best performance:
Dimension       Time    Gflop/s       GB/s        Error
        32   0.231244   8.648993 138.383894 0.000000e+00
        64   0.233898   8.551402 136.822429 0.000000e+00
        96   0.237965   8.409952 134.559225 0.000000e+00
       128   0.239092   8.367853 133.885655 0.000000e+00
       160   0.234813   8.547407 136.758505 0.000000e+00
       192   0.236519   8.498770 135.980325 0.000000e+00
       224   0.236619   8.455020 135.280314 0.000000e+00
       256   0.269785   7.462478 119.399641 0.000000e+00
       288   0.244213   8.216523 131.464362 0.000000e+00
       320   0.246660   8.236498 131.783964 0.000000e+00
       352   0.240143   8.354416 133.670651 0.000000e+00
       384   0.258914   7.872998 125.967975 0.000000e+00
       416   0.239478   8.417291 134.676662 0.000000e+00
       448   0.262777   8.212182 131.394910 0.000000e+00
       480   0.267699   8.262399 132.198383 0.000000e+00
       512   0.305588   7.027393 112.438285 0.000000e+00
       544   0.267386   8.429191 134.867053 0.000000e+00
       576   0.273935   8.371474 133.943581 0.000000e+00
       608   0.267642   8.397611 134.361779 0.000000e+00
       640   0.270900   7.741427 123.862832 0.000000e+00
       672   0.297772   8.152947 130.447153 0.000000e+00
       704   0.259254   8.075037 129.200584 0.000000e+00
       736   0.295663   8.090722 129.451550 0.000000e+00
       768   0.398146   6.826408 109.222521 0.000000e+00
       800   0.255205   8.024930 128.398877 0.000000e+00
       832   0.290582   7.927949 126.847187 0.000000e+00
       864   0.326697   7.896886 126.350184 0.000000e+00
       896   0.375800   7.656442 122.503074 0.000000e+00
       928   0.389452   8.208248 131.331962 0.000000e+00
       960   0.436615   8.105413 129.686612 0.000000e+00
       992   0.474330   8.232165 131.714634 0.000000e+00
      1024   0.307021   6.994593 111.913488 0.000000e+00
      1056   0.285461   8.250400 132.006406 0.000000e+00
      1088   0.314835   8.181517 130.904276 0.000000e+00
      1120   0.337655   8.321675 133.146803 0.000000e+00
      1152   0.385131   7.939241 127.027856 0.000000e+00
      1184   0.401008   8.278133 132.450127 0.000000e+00
      1216   0.451302   7.968254 127.492071 0.000000e+00
      1248   0.485814   8.002098 128.033572 0.000000e+00
      1280   0.621023   6.753863 108.061807 0.000000e+00
      1312   0.598502   7.546858 120.749729 0.000000e+00
      1344   0.636937   7.623097 121.969556 0.000000e+00
      1376   0.680155   7.660858 122.573732 0.000000e+00
      1408   0.724063   7.710124 123.361980 0.000000e+00
      1440   0.837515   7.130584 114.089346 0.000000e+00
      1472   0.849451   7.509574 120.153179 0.000000e+00
      1504   0.955229   7.123050 113.968797 0.000000e+00
      1536   1.104707   6.560797 104.972753 0.000000e+00
      1568   0.996933   7.733966 123.743452 0.000000e+00
      1600   1.062172   7.712499 123.399983 0.000000e+00
      1632   1.182740   7.350232 117.603711 0.000000e+00
      1664   1.301349   7.081026 113.296424 0.000000e+00
      1696   1.317704   7.404394 118.470303 0.000000e+00
      1728   1.379552   7.480373 119.685974 0.000000e+00
      1760   1.460218   7.467072 119.473154 0.000000e+00
      1792   1.611239   7.143056 114.288890 0.000000e+00
      1824   1.608400   7.545888 120.734202 0.000000e+00
      1856   1.687452   7.577616 121.241853 0.000000e+00
      1888   1.763106   7.634094 122.145497 0.000000e+00
      1920   1.881879   7.522152 120.354425 0.000000e+00
      1952   1.956628   7.602582 121.641312 0.000000e+00
      1984   2.042517   7.646970 122.351523 0.000000e+00

And then I add OpenMP, get better performance:

When dimension is 1984, I improved the peak FLOP-rate from 8.648993 to 31.725519, which increase by 267%.

 Dimension       Time    Gflop/s       GB/s        Error
        32   0.346525   5.771667  92.346671 0.000000e+00
        64   0.344618   5.803996  92.863938 0.000000e+00
        96   0.100359  19.941234 319.059747 0.000000e+00
       128   0.073515  27.214773 435.436366 0.000000e+00
       160   0.096141  20.876055 334.016883 0.000000e+00
       192   0.323404   6.215507  99.448110 0.000000e+00
       224   0.255163   7.840542 125.448679 0.000000e+00
       256   0.064286  31.317204 501.075256 0.000000e+00
       288   0.081224  24.704277 395.268435 0.000000e+00
       320   0.074728  27.186684 434.986948 0.000000e+00
       352   0.067654  29.654563 474.473000 0.000000e+00
       384   0.096427  21.139569 338.233103 0.000000e+00
       416   0.084897  23.743657 379.898519 0.000000e+00
       448   0.078645  27.439467 439.031470 0.000000e+00
       480   0.116003  19.067134 305.074144 0.000000e+00
       512   0.075212  28.552548 456.840768 0.000000e+00
       544   0.080014  28.168236 450.691779 0.000000e+00
       576   0.078882  29.071600 465.145599 0.000000e+00
       608   0.163436  13.751878 220.030040 0.000000e+00
       640   0.066534  31.520033 504.320532 0.000000e+00
       672   0.083974  28.910284 462.564552 0.000000e+00
       704   0.070047  29.886977 478.191631 0.000000e+00
       736   0.089275  26.794976 428.719619 0.000000e+00
       768   0.085832  31.665576 506.649217 0.000000e+00
       800   0.069295  29.554654 472.874470 0.000000e+00
       832   0.128651  17.906771 286.508334 0.000000e+00
       864   0.082413  31.304291 500.868650 0.000000e+00
       896   0.090693  31.725519 507.608297 0.000000e+00
       928   0.106957  29.887944 478.207111 0.000000e+00
       960   0.118977  29.744842 475.917479 0.000000e+00
       992   0.123927  31.508599 504.137591 0.000000e+00
      1024   0.073758  29.115433 465.846928 0.000000e+00
      1056   0.080722  29.176337 466.821399 0.000000e+00
      1088   0.084343  30.539840 488.637445 0.000000e+00
      1120   0.139330  20.166933 322.670927 0.000000e+00
      1152   0.166478  18.366682 293.866906 0.000000e+00
      1184   0.176557  18.801798 300.828761 0.000000e+00
      1216   0.126685  28.386035 454.176559 0.000000e+00
      1248   0.133720  29.072168 465.154695 0.000000e+00
      1280   0.161743  25.931897 414.910354 0.000000e+00
      1312   0.176862  25.538645 408.618315 0.000000e+00
      1344   0.184574  26.306127 420.898032 0.000000e+00
      1376   0.269682  19.321134 309.138138 0.000000e+00
      1408   0.293873  18.996720 303.947513 0.000000e+00
      1440   0.273727  21.817246 349.075943 0.000000e+00
      1472   0.231337  27.574577 441.193238 0.000000e+00
      1504   0.262309  25.939417 415.030673 0.000000e+00
      1536   0.266091  27.237922 435.806750 0.000000e+00
      1568   0.275767  27.959256 447.348089 0.000000e+00
      1600   0.277299  29.542167 472.674678 0.000000e+00
      1632   0.448800  19.370342 309.925472 0.000000e+00
      1664   0.346257  26.612848 425.805566 0.000000e+00
      1696   0.514177  18.975561 303.608983 0.000000e+00
      1728   0.468520  22.025856 352.413699 0.000000e+00
      1760   0.399252  27.309938 436.959004 0.000000e+00
      1792   0.431932  26.645822 426.333152 0.000000e+00
      1824   0.440266  27.567009 441.072138 0.000000e+00
      1856   0.447591  28.568201 457.091212 0.000000e+00
      1888   0.440586  30.549609 488.793739 0.000000e+00
      1920   0.467379  30.287550 484.600797 0.000000e+00
      1952   0.679749  21.883707 350.139313 0.000000e+00
      1984   0.777342  20.092922 321.486746 0.000000e+00


3

omp_solved2:

line 21: variable tid should be unique for each thread
line 34: there is race condition, so add reduction(+:totally unique)

omp_solved3:
line 86: remove #pragma omp barrier, since the previous is a critical section

omp_solved4: 

line 16: change the initialization of matrix a

omp_solved5: 

line 44: change the lock order of locka and lockb to avoid deadlock.

omp_solved6: 

initialze sum as global variable



4

total iterations = 5000

Jacobi:
N = 10, threads = 1: time = 0.027337
N = 10, threads = 2: time = 0.071379
N = 100, threads = 1: time = 17.306542
N = 100, threads = 2: time = 8.847797
N = 100, threads = 4: time = 4.568267
N = 100, threads = 8: time = 5.652365
N = 100, threads = 16: time = 10.431201
N = 200, threads = 1: time = 137.140248
N = 200, threads = 2: time = 69.601683
N = 200, threads = 4: time = 36.477310
N = 200, threads = 8: time = 40.237150
N = 200, threads = 16: time = 67.913595


GS:
N = 10, threads = 1: time = 0.026643
N = 10, threads = 2: time = 0.067091
N = 100, threads = 1: time = 17.479887
N = 100, threads = 2: time = 9.002093
N = 100, threads = 4: time = 4.662965
N = 100, threads = 8: time = 5.649812
N = 100, threads = 16: time = 11.571945
N = 200, threads = 1: time = 137.507996
N = 200, threads = 2: time = 69.602887
N = 200, threads = 4: time = 36.779793
N = 200, threads = 8: time = 41.205546
N = 200, threads = 16: time = 71.605885

machine I used: NYU cims, linux





